//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/Parser/Generated/DTSchema.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DTSchema.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DTSchemaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, IDENTIFIER=16, 
		LINE_COMMENT=17, SPACE=18;
	public const int
		RULE_start = 0, RULE_list_o_definition_p_ = 1, RULE_start__y_ = 2, RULE_definition = 3, 
		RULE_def_t_extern = 4, RULE_def_t_record = 5, RULE_optional_t_annotation = 6, 
		RULE_fieldname = 7, RULE_field = 8, RULE_ctor = 9, RULE_constructor = 10, 
		RULE_list_o_constructor_p_ = 11, RULE_def_t_sort = 12, RULE_seplist_o__i__s__i__s_def_t_typ_p_ = 13, 
		RULE_seplist_o__i__s__i__s_field_p_ = 14, RULE_def_t_typ = 15, RULE_nullable_t_ret = 16;
	public static readonly string[] ruleNames = {
		"start", "list_o_definition_p_", "start__y_", "definition", "def_t_extern", 
		"def_t_record", "optional_t_annotation", "fieldname", "field", "ctor", 
		"constructor", "list_o_constructor_p_", "def_t_sort", "seplist_o__i__s__i__s_def_t_typ_p_", 
		"seplist_o__i__s__i__s_field_p_", "def_t_typ", "nullable_t_ret"
	};

	private static readonly string[] _LiteralNames = {
		null, "'extern'", "'type'", "'?'", "':'", "'fn'", "'('", "')'", "'|'", 
		"'='", "','", "'['", "']'", "'{'", "'}'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "IDENTIFIER", "LINE_COMMENT", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DTSchema.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DTSchemaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	public static Sort Sort (string name,System.Collections.Generic.List<Ctor> variants)
	{
	    return (Sort) new Sort(name,variants);
	}
	public static Ctor Ctor (string name,System.Collections.Generic.List<Field> fields)
	{
	    return (Ctor) new Ctor(name,fields);
	}
	public static Field Field (string name,Ty typ,bool nullable)
	{
	    return (Field) new Field(name,typ,nullable);
	}
	public static Ty TyTuple (System.Collections.Generic.List<Ty> elts)
	{
	    return (Ty) new TyTuple(elts);
	}
	public static Ty TyNamed (string name)
	{
	    return (Ty) new TyNamed(name);
	}
	public static Ty TyMap (Ty key,Ty value)
	{
	    return (Ty) new TyMap(key,value);
	}
	public static Ty TyList (Ty elt)
	{
	    return (Ty) new TyList(elt);
	}
	public static Ty TyFn (System.Collections.Generic.List<Field> args,Ret ret)
	{
	    return (Ty) new TyFn(args,ret);
	}
	public static Ret NoRet ()
	{
	    return (Ret) new NoRet();
	}
	public static Ret HasRet (Ty ret,bool nullable)
	{
	    return (Ret) new HasRet(ret,nullable);
	}
	public static Def DefSort (Pos pos,Sort sort)
	{
	    return (Def) new DefSort(pos,sort);
	}
	public static Def DefRecord (Pos pos,Ctor ctor)
	{
	    return (Def) new DefRecord(pos,ctor);
	}
	public static Def DefExtern (Pos pos,string name)
	{
	    return (Def) new DefExtern(pos,name);
	}

		public DTSchemaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DTSchemaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public System.Collections.Generic.List<Def> result;
		public Start__y_Context v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DTSchemaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Start__y_Context start__y_() {
			return GetRuleContext<Start__y_Context>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			_localctx.v = start__y_();
			State = 35;
			Match(Eof);
			 _localctx.result =  _localctx.v.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_o_definition_p_Context : ParserRuleContext {
		public System.Collections.Generic.List<Def> result;
		public List_o_definition_p_Context list_o_definition_p__0__1;
		public DefinitionContext list_o_definition_p__1__1;
		public DefinitionContext list_o_definition_p__0__2;
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_o_definition_p_Context list_o_definition_p_() {
			return GetRuleContext<List_o_definition_p_Context>(0);
		}
		public List_o_definition_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_o_definition_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterList_o_definition_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitList_o_definition_p_(this);
		}
	}

	[RuleVersion(0)]
	public List_o_definition_p_Context list_o_definition_p_() {
		return list_o_definition_p_(0);
	}

	private List_o_definition_p_Context list_o_definition_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		List_o_definition_p_Context _localctx = new List_o_definition_p_Context(Context, _parentState);
		List_o_definition_p_Context _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_list_o_definition_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 39;
			_localctx.list_o_definition_p__1__1 = definition();
			 _localctx.result =  new System.Collections.Generic.List<Def> { _localctx.list_o_definition_p__1__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 48;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new List_o_definition_p_Context(_parentctx, _parentState);
					_localctx.list_o_definition_p__0__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_list_o_definition_p_);
					State = 42;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 43;
					_localctx.list_o_definition_p__0__2 = definition();
					 _localctx.result =  (System.Collections.Generic.List<Def>) appendList<Def>((System.Collections.Generic.List<Def>) _localctx.list_o_definition_p__0__1.result, (Def) _localctx.list_o_definition_p__0__2.result);
					                      
					}
					} 
				}
				State = 50;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Start__y_Context : ParserRuleContext {
		public System.Collections.Generic.List<Def> result;
		public List_o_definition_p_Context start__y__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public List_o_definition_p_Context list_o_definition_p_() {
			return GetRuleContext<List_o_definition_p_Context>(0);
		}
		public Start__y_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start__y_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterStart__y_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitStart__y_(this);
		}
	}

	[RuleVersion(0)]
	public Start__y_Context start__y_() {
		Start__y_Context _localctx = new Start__y_Context(Context, State);
		EnterRule(_localctx, 4, RULE_start__y_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_localctx.start__y__0__1 = list_o_definition_p_(0);
			 _localctx.result =  _localctx.start__y__0__1.result;
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public Def result;
		public Def_t_recordContext definition_0__1;
		public Def_t_sortContext definition_1__1;
		public Def_t_externContext definition_2__1;
		[System.Diagnostics.DebuggerNonUserCode] public Def_t_recordContext def_t_record() {
			return GetRuleContext<Def_t_recordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_t_sortContext def_t_sort() {
			return GetRuleContext<Def_t_sortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_t_externContext def_t_extern() {
			return GetRuleContext<Def_t_externContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_definition);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				_localctx.definition_0__1 = def_t_record();
				 _localctx.result =  _localctx.definition_0__1.result;
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				_localctx.definition_1__1 = def_t_sort();
				 _localctx.result =  _localctx.definition_1__1.result;
				            
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60;
				_localctx.definition_2__1 = def_t_extern();
				 _localctx.result =  _localctx.definition_2__1.result;
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_t_externContext : ParserRuleContext {
		public Def result;
		public IToken def_t_extern_0__1;
		public IToken def_t_extern_0__3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DTSchemaParser.IDENTIFIER, 0); }
		public Def_t_externContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_t_extern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterDef_t_extern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitDef_t_extern(this);
		}
	}

	[RuleVersion(0)]
	public Def_t_externContext def_t_extern() {
		Def_t_externContext _localctx = new Def_t_externContext(Context, State);
		EnterRule(_localctx, 8, RULE_def_t_extern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			_localctx.def_t_extern_0__1 = Match(T__0);
			State = 66;
			Match(T__1);
			State = 67;
			_localctx.def_t_extern_0__3 = Match(IDENTIFIER);
			 _localctx.result =  (Def) DefExtern((Pos) (Pos) getPos((IToken) _localctx.def_t_extern_0__1), (string) (string) lexeme((IToken) _localctx.def_t_extern_0__3));
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_t_recordContext : ParserRuleContext {
		public Def result;
		public IToken def_t_record_0__1;
		public CtorContext def_t_record_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public CtorContext ctor() {
			return GetRuleContext<CtorContext>(0);
		}
		public Def_t_recordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_t_record; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterDef_t_record(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitDef_t_record(this);
		}
	}

	[RuleVersion(0)]
	public Def_t_recordContext def_t_record() {
		Def_t_recordContext _localctx = new Def_t_recordContext(Context, State);
		EnterRule(_localctx, 10, RULE_def_t_record);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			_localctx.def_t_record_0__1 = Match(T__1);
			State = 71;
			_localctx.def_t_record_0__2 = ctor();
			 _localctx.result =  (Def) DefRecord((Pos) (Pos) getPos((IToken) _localctx.def_t_record_0__1), (Ctor) _localctx.def_t_record_0__2.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_t_annotationContext : ParserRuleContext {
		public bool result;
		public Optional_t_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_t_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterOptional_t_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitOptional_t_annotation(this);
		}
	}

	[RuleVersion(0)]
	public Optional_t_annotationContext optional_t_annotation() {
		Optional_t_annotationContext _localctx = new Optional_t_annotationContext(Context, State);
		EnterRule(_localctx, 12, RULE_optional_t_annotation);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				Match(T__2);
				State = 75;
				Match(T__3);
				 _localctx.result =  true;
				            
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				Match(T__3);
				 _localctx.result =  false;
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldnameContext : ParserRuleContext {
		public string result;
		public IToken fieldname_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DTSchemaParser.IDENTIFIER, 0); }
		public FieldnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterFieldname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitFieldname(this);
		}
	}

	[RuleVersion(0)]
	public FieldnameContext fieldname() {
		FieldnameContext _localctx = new FieldnameContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldname);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				_localctx.fieldname_0__1 = Match(IDENTIFIER);
				 _localctx.result =  (string) lexeme((IToken) _localctx.fieldname_0__1);
				            
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				Match(T__4);
				 _localctx.result =  "fn";
				            
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				Match(T__1);
				 _localctx.result =  "type";
				            
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 4);
				{
				State = 87;
				Match(T__0);
				 _localctx.result =  "extern";
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public Field result;
		public FieldnameContext field_0__1;
		public Optional_t_annotationContext field_0__2;
		public Def_t_typContext field_0__3;
		[System.Diagnostics.DebuggerNonUserCode] public FieldnameContext fieldname() {
			return GetRuleContext<FieldnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optional_t_annotationContext optional_t_annotation() {
			return GetRuleContext<Optional_t_annotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_t_typContext def_t_typ() {
			return GetRuleContext<Def_t_typContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 16, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_localctx.field_0__1 = fieldname();
			State = 92;
			_localctx.field_0__2 = optional_t_annotation();
			State = 93;
			_localctx.field_0__3 = def_t_typ();
			 _localctx.result =  (Field) Field((string) _localctx.field_0__1.result, (Ty) _localctx.field_0__3.result, (bool) _localctx.field_0__2.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtorContext : ParserRuleContext {
		public Ctor result;
		public IToken ctor_0__1;
		public Seplist_o__i__s__i__s_field_p_Context ctor_0__3;
		public IToken ctor_1__1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DTSchemaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_field_p_Context seplist_o__i__s__i__s_field_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_field_p_Context>(0);
		}
		public CtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterCtor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitCtor(this);
		}
	}

	[RuleVersion(0)]
	public CtorContext ctor() {
		CtorContext _localctx = new CtorContext(Context, State);
		EnterRule(_localctx, 18, RULE_ctor);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				_localctx.ctor_0__1 = Match(IDENTIFIER);
				State = 97;
				Match(T__5);
				State = 98;
				_localctx.ctor_0__3 = seplist_o__i__s__i__s_field_p_(0);
				State = 99;
				Match(T__6);
				 _localctx.result =  (Ctor) Ctor((string) (string) lexeme((IToken) _localctx.ctor_0__1), (System.Collections.Generic.List<Field>) _localctx.ctor_0__3.result);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				_localctx.ctor_1__1 = Match(IDENTIFIER);
				 _localctx.result =  (Ctor) Ctor((string) (string) lexeme((IToken) _localctx.ctor_1__1), (System.Collections.Generic.List<Field>) new System.Collections.Generic.List<Field> {  });
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public Ctor result;
		public CtorContext constructor_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public CtorContext ctor() {
			return GetRuleContext<CtorContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 20, RULE_constructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(T__7);
			State = 107;
			_localctx.constructor_0__2 = ctor();
			 _localctx.result =  _localctx.constructor_0__2.result;
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_o_constructor_p_Context : ParserRuleContext {
		public System.Collections.Generic.List<Ctor> result;
		public List_o_constructor_p_Context list_o_constructor_p__0__1;
		public ConstructorContext list_o_constructor_p__1__1;
		public ConstructorContext list_o_constructor_p__0__2;
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_o_constructor_p_Context list_o_constructor_p_() {
			return GetRuleContext<List_o_constructor_p_Context>(0);
		}
		public List_o_constructor_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_o_constructor_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterList_o_constructor_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitList_o_constructor_p_(this);
		}
	}

	[RuleVersion(0)]
	public List_o_constructor_p_Context list_o_constructor_p_() {
		return list_o_constructor_p_(0);
	}

	private List_o_constructor_p_Context list_o_constructor_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		List_o_constructor_p_Context _localctx = new List_o_constructor_p_Context(Context, _parentState);
		List_o_constructor_p_Context _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_list_o_constructor_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 111;
			_localctx.list_o_constructor_p__1__1 = constructor();
			 _localctx.result =  new System.Collections.Generic.List<Ctor> { _localctx.list_o_constructor_p__1__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new List_o_constructor_p_Context(_parentctx, _parentState);
					_localctx.list_o_constructor_p__0__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_list_o_constructor_p_);
					State = 114;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 115;
					_localctx.list_o_constructor_p__0__2 = constructor();
					 _localctx.result =  (System.Collections.Generic.List<Ctor>) appendList<Ctor>((System.Collections.Generic.List<Ctor>) _localctx.list_o_constructor_p__0__1.result, (Ctor) _localctx.list_o_constructor_p__0__2.result);
					                      
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Def_t_sortContext : ParserRuleContext {
		public Def result;
		public IToken def_t_sort_0__1;
		public IToken def_t_sort_0__2;
		public List_o_constructor_p_Context def_t_sort_0__4;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DTSchemaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_o_constructor_p_Context list_o_constructor_p_() {
			return GetRuleContext<List_o_constructor_p_Context>(0);
		}
		public Def_t_sortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_t_sort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterDef_t_sort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitDef_t_sort(this);
		}
	}

	[RuleVersion(0)]
	public Def_t_sortContext def_t_sort() {
		Def_t_sortContext _localctx = new Def_t_sortContext(Context, State);
		EnterRule(_localctx, 24, RULE_def_t_sort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_localctx.def_t_sort_0__1 = Match(T__1);
			State = 124;
			_localctx.def_t_sort_0__2 = Match(IDENTIFIER);
			State = 125;
			Match(T__8);
			State = 126;
			_localctx.def_t_sort_0__4 = list_o_constructor_p_(0);
			 _localctx.result =  (Def) DefSort((Pos) (Pos) getPos((IToken) _localctx.def_t_sort_0__1), (Sort) (Sort) Sort((string) (string) lexeme((IToken) _localctx.def_t_sort_0__2), (System.Collections.Generic.List<Ctor>) _localctx.def_t_sort_0__4.result));
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seplist_o__i__s__i__s_def_t_typ_p_Context : ParserRuleContext {
		public System.Collections.Generic.List<Ty> result;
		public Seplist_o__i__s__i__s_def_t_typ_p_Context seplist_o__i__s__i__s_def_t_typ_p__0__1;
		public Def_t_typContext seplist_o__i__s__i__s_def_t_typ_p__1__1;
		public Def_t_typContext seplist_o__i__s__i__s_def_t_typ_p__0__3;
		[System.Diagnostics.DebuggerNonUserCode] public Def_t_typContext def_t_typ() {
			return GetRuleContext<Def_t_typContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_def_t_typ_p_Context seplist_o__i__s__i__s_def_t_typ_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_def_t_typ_p_Context>(0);
		}
		public Seplist_o__i__s__i__s_def_t_typ_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seplist_o__i__s__i__s_def_t_typ_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterSeplist_o__i__s__i__s_def_t_typ_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitSeplist_o__i__s__i__s_def_t_typ_p_(this);
		}
	}

	[RuleVersion(0)]
	public Seplist_o__i__s__i__s_def_t_typ_p_Context seplist_o__i__s__i__s_def_t_typ_p_() {
		return seplist_o__i__s__i__s_def_t_typ_p_(0);
	}

	private Seplist_o__i__s__i__s_def_t_typ_p_Context seplist_o__i__s__i__s_def_t_typ_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Seplist_o__i__s__i__s_def_t_typ_p_Context _localctx = new Seplist_o__i__s__i__s_def_t_typ_p_Context(Context, _parentState);
		Seplist_o__i__s__i__s_def_t_typ_p_Context _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_seplist_o__i__s__i__s_def_t_typ_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 130;
			_localctx.seplist_o__i__s__i__s_def_t_typ_p__1__1 = def_t_typ();
			 _localctx.result =  new System.Collections.Generic.List<Ty> { _localctx.seplist_o__i__s__i__s_def_t_typ_p__1__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Seplist_o__i__s__i__s_def_t_typ_p_Context(_parentctx, _parentState);
					_localctx.seplist_o__i__s__i__s_def_t_typ_p__0__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_seplist_o__i__s__i__s_def_t_typ_p_);
					State = 133;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 134;
					Match(T__9);
					State = 135;
					_localctx.seplist_o__i__s__i__s_def_t_typ_p__0__3 = def_t_typ();
					 _localctx.result =  (System.Collections.Generic.List<Ty>) appendList<Ty>((System.Collections.Generic.List<Ty>) _localctx.seplist_o__i__s__i__s_def_t_typ_p__0__1.result, (Ty) _localctx.seplist_o__i__s__i__s_def_t_typ_p__0__3.result);
					                      
					}
					} 
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Seplist_o__i__s__i__s_field_p_Context : ParserRuleContext {
		public System.Collections.Generic.List<Field> result;
		public Seplist_o__i__s__i__s_field_p_Context seplist_o__i__s__i__s_field_p__0__1;
		public FieldContext seplist_o__i__s__i__s_field_p__1__1;
		public FieldContext seplist_o__i__s__i__s_field_p__0__3;
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_field_p_Context seplist_o__i__s__i__s_field_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_field_p_Context>(0);
		}
		public Seplist_o__i__s__i__s_field_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seplist_o__i__s__i__s_field_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterSeplist_o__i__s__i__s_field_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitSeplist_o__i__s__i__s_field_p_(this);
		}
	}

	[RuleVersion(0)]
	public Seplist_o__i__s__i__s_field_p_Context seplist_o__i__s__i__s_field_p_() {
		return seplist_o__i__s__i__s_field_p_(0);
	}

	private Seplist_o__i__s__i__s_field_p_Context seplist_o__i__s__i__s_field_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Seplist_o__i__s__i__s_field_p_Context _localctx = new Seplist_o__i__s__i__s_field_p_Context(Context, _parentState);
		Seplist_o__i__s__i__s_field_p_Context _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_seplist_o__i__s__i__s_field_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 144;
			_localctx.seplist_o__i__s__i__s_field_p__1__1 = field();
			 _localctx.result =  new System.Collections.Generic.List<Field> { _localctx.seplist_o__i__s__i__s_field_p__1__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Seplist_o__i__s__i__s_field_p_Context(_parentctx, _parentState);
					_localctx.seplist_o__i__s__i__s_field_p__0__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_seplist_o__i__s__i__s_field_p_);
					State = 147;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 148;
					Match(T__9);
					State = 149;
					_localctx.seplist_o__i__s__i__s_field_p__0__3 = field();
					 _localctx.result =  (System.Collections.Generic.List<Field>) appendList<Field>((System.Collections.Generic.List<Field>) _localctx.seplist_o__i__s__i__s_field_p__0__1.result, (Field) _localctx.seplist_o__i__s__i__s_field_p__0__3.result);
					                      
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Def_t_typContext : ParserRuleContext {
		public Ty result;
		public Seplist_o__i__s__i__s_def_t_typ_p_Context def_t_typ_0__2;
		public Def_t_typContext def_t_typ_1__2;
		public Def_t_typContext def_t_typ_1__4;
		public Seplist_o__i__s__i__s_def_t_typ_p_Context def_t_typ_2__2;
		public IToken def_t_typ_3__1;
		public Seplist_o__i__s__i__s_field_p_Context def_t_typ_4__3;
		public Nullable_t_retContext def_t_typ_4__6;
		public Seplist_o__i__s__i__s_field_p_Context def_t_typ_5__3;
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_def_t_typ_p_Context seplist_o__i__s__i__s_def_t_typ_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_def_t_typ_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_t_typContext[] def_t_typ() {
			return GetRuleContexts<Def_t_typContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_t_typContext def_t_typ(int i) {
			return GetRuleContext<Def_t_typContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DTSchemaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_field_p_Context seplist_o__i__s__i__s_field_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_field_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nullable_t_retContext nullable_t_ret() {
			return GetRuleContext<Nullable_t_retContext>(0);
		}
		public Def_t_typContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_t_typ; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterDef_t_typ(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitDef_t_typ(this);
		}
	}

	[RuleVersion(0)]
	public Def_t_typContext def_t_typ() {
		Def_t_typContext _localctx = new Def_t_typContext(Context, State);
		EnterRule(_localctx, 30, RULE_def_t_typ);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				Match(T__10);
				State = 158;
				_localctx.def_t_typ_0__2 = seplist_o__i__s__i__s_def_t_typ_p_(0);
				State = 159;
				Match(T__11);
				 _localctx.result =  (Ty) select<Ty>((bool) (bool) notSingular<Ty>((System.Collections.Generic.List<Ty>) _localctx.def_t_typ_0__2.result), (Ty) (Ty) TyTuple((System.Collections.Generic.List<Ty>) _localctx.def_t_typ_0__2.result), (Ty) (Ty) TyList((Ty) (Ty) firstElt<Ty>((System.Collections.Generic.List<Ty>) _localctx.def_t_typ_0__2.result)));
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162;
				Match(T__12);
				State = 163;
				_localctx.def_t_typ_1__2 = def_t_typ();
				State = 164;
				Match(T__3);
				State = 165;
				_localctx.def_t_typ_1__4 = def_t_typ();
				State = 166;
				Match(T__13);
				 _localctx.result =  (Ty) TyMap((Ty) _localctx.def_t_typ_1__2.result, (Ty) _localctx.def_t_typ_1__4.result);
				            
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				Match(T__12);
				State = 170;
				_localctx.def_t_typ_2__2 = seplist_o__i__s__i__s_def_t_typ_p_(0);
				State = 171;
				Match(T__13);
				 _localctx.result =  (Ty) TyTuple((System.Collections.Generic.List<Ty>) _localctx.def_t_typ_2__2.result);
				            
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174;
				_localctx.def_t_typ_3__1 = Match(IDENTIFIER);
				 _localctx.result =  (Ty) TyNamed((string) (string) lexeme((IToken) _localctx.def_t_typ_3__1));
				            
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 176;
				Match(T__4);
				State = 177;
				Match(T__10);
				State = 178;
				_localctx.def_t_typ_4__3 = seplist_o__i__s__i__s_field_p_(0);
				State = 179;
				Match(T__11);
				State = 180;
				Match(T__14);
				State = 181;
				_localctx.def_t_typ_4__6 = nullable_t_ret();
				 _localctx.result =  (Ty) TyFn((System.Collections.Generic.List<Field>) _localctx.def_t_typ_4__3.result, (Ret) _localctx.def_t_typ_4__6.result);
				            
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 184;
				Match(T__4);
				State = 185;
				Match(T__10);
				State = 186;
				_localctx.def_t_typ_5__3 = seplist_o__i__s__i__s_field_p_(0);
				State = 187;
				Match(T__11);
				 _localctx.result =  (Ty) TyFn((System.Collections.Generic.List<Field>) _localctx.def_t_typ_5__3.result, (Ret) (Ret) NoRet());
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nullable_t_retContext : ParserRuleContext {
		public Ret result;
		public Def_t_typContext nullable_t_ret_0__1;
		public Def_t_typContext nullable_t_ret_1__1;
		[System.Diagnostics.DebuggerNonUserCode] public Def_t_typContext def_t_typ() {
			return GetRuleContext<Def_t_typContext>(0);
		}
		public Nullable_t_retContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullable_t_ret; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.EnterNullable_t_ret(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDTSchemaListener typedListener = listener as IDTSchemaListener;
			if (typedListener != null) typedListener.ExitNullable_t_ret(this);
		}
	}

	[RuleVersion(0)]
	public Nullable_t_retContext nullable_t_ret() {
		Nullable_t_retContext _localctx = new Nullable_t_retContext(Context, State);
		EnterRule(_localctx, 32, RULE_nullable_t_ret);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				_localctx.nullable_t_ret_0__1 = def_t_typ();
				State = 193;
				Match(T__2);
				 _localctx.result =  (Ret) HasRet((Ty) _localctx.nullable_t_ret_0__1.result, (bool) true);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				_localctx.nullable_t_ret_1__1 = def_t_typ();
				 _localctx.result =  (Ret) HasRet((Ty) _localctx.nullable_t_ret_1__1.result, (bool) false);
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return list_o_definition_p__sempred((List_o_definition_p_Context)_localctx, predIndex);
		case 11: return list_o_constructor_p__sempred((List_o_constructor_p_Context)_localctx, predIndex);
		case 13: return seplist_o__i__s__i__s_def_t_typ_p__sempred((Seplist_o__i__s__i__s_def_t_typ_p_Context)_localctx, predIndex);
		case 14: return seplist_o__i__s__i__s_field_p__sempred((Seplist_o__i__s__i__s_field_p_Context)_localctx, predIndex);
		}
		return true;
	}
	private bool list_o_definition_p__sempred(List_o_definition_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool list_o_constructor_p__sempred(List_o_constructor_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool seplist_o__i__s__i__s_def_t_typ_p__sempred(Seplist_o__i__s__i__s_def_t_typ_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool seplist_o__i__s__i__s_field_p__sempred(Seplist_o__i__s__i__s_field_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,18,202,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
		1,47,8,1,10,1,12,1,50,9,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,3,3,64,8,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		3,6,80,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,90,8,7,1,8,1,8,1,8,1,8,
		1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,105,8,9,1,10,1,10,1,10,1,10,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,119,8,11,10,11,12,11,122,9,
		11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,5,13,139,8,13,10,13,12,13,142,9,13,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,5,14,153,8,14,10,14,12,14,156,9,14,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,3,15,191,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,200,8,16,
		1,16,0,4,2,22,26,28,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,
		0,201,0,34,1,0,0,0,2,38,1,0,0,0,4,51,1,0,0,0,6,63,1,0,0,0,8,65,1,0,0,0,
		10,70,1,0,0,0,12,79,1,0,0,0,14,89,1,0,0,0,16,91,1,0,0,0,18,104,1,0,0,0,
		20,106,1,0,0,0,22,110,1,0,0,0,24,123,1,0,0,0,26,129,1,0,0,0,28,143,1,0,
		0,0,30,190,1,0,0,0,32,199,1,0,0,0,34,35,3,4,2,0,35,36,5,0,0,1,36,37,6,
		0,-1,0,37,1,1,0,0,0,38,39,6,1,-1,0,39,40,3,6,3,0,40,41,6,1,-1,0,41,48,
		1,0,0,0,42,43,10,2,0,0,43,44,3,6,3,0,44,45,6,1,-1,0,45,47,1,0,0,0,46,42,
		1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,3,1,0,0,0,50,48,1,
		0,0,0,51,52,3,2,1,0,52,53,6,2,-1,0,53,5,1,0,0,0,54,55,3,10,5,0,55,56,6,
		3,-1,0,56,64,1,0,0,0,57,58,3,24,12,0,58,59,6,3,-1,0,59,64,1,0,0,0,60,61,
		3,8,4,0,61,62,6,3,-1,0,62,64,1,0,0,0,63,54,1,0,0,0,63,57,1,0,0,0,63,60,
		1,0,0,0,64,7,1,0,0,0,65,66,5,1,0,0,66,67,5,2,0,0,67,68,5,16,0,0,68,69,
		6,4,-1,0,69,9,1,0,0,0,70,71,5,2,0,0,71,72,3,18,9,0,72,73,6,5,-1,0,73,11,
		1,0,0,0,74,75,5,3,0,0,75,76,5,4,0,0,76,80,6,6,-1,0,77,78,5,4,0,0,78,80,
		6,6,-1,0,79,74,1,0,0,0,79,77,1,0,0,0,80,13,1,0,0,0,81,82,5,16,0,0,82,90,
		6,7,-1,0,83,84,5,5,0,0,84,90,6,7,-1,0,85,86,5,2,0,0,86,90,6,7,-1,0,87,
		88,5,1,0,0,88,90,6,7,-1,0,89,81,1,0,0,0,89,83,1,0,0,0,89,85,1,0,0,0,89,
		87,1,0,0,0,90,15,1,0,0,0,91,92,3,14,7,0,92,93,3,12,6,0,93,94,3,30,15,0,
		94,95,6,8,-1,0,95,17,1,0,0,0,96,97,5,16,0,0,97,98,5,6,0,0,98,99,3,28,14,
		0,99,100,5,7,0,0,100,101,6,9,-1,0,101,105,1,0,0,0,102,103,5,16,0,0,103,
		105,6,9,-1,0,104,96,1,0,0,0,104,102,1,0,0,0,105,19,1,0,0,0,106,107,5,8,
		0,0,107,108,3,18,9,0,108,109,6,10,-1,0,109,21,1,0,0,0,110,111,6,11,-1,
		0,111,112,3,20,10,0,112,113,6,11,-1,0,113,120,1,0,0,0,114,115,10,2,0,0,
		115,116,3,20,10,0,116,117,6,11,-1,0,117,119,1,0,0,0,118,114,1,0,0,0,119,
		122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,23,1,0,0,0,122,120,1,0,
		0,0,123,124,5,2,0,0,124,125,5,16,0,0,125,126,5,9,0,0,126,127,3,22,11,0,
		127,128,6,12,-1,0,128,25,1,0,0,0,129,130,6,13,-1,0,130,131,3,30,15,0,131,
		132,6,13,-1,0,132,140,1,0,0,0,133,134,10,2,0,0,134,135,5,10,0,0,135,136,
		3,30,15,0,136,137,6,13,-1,0,137,139,1,0,0,0,138,133,1,0,0,0,139,142,1,
		0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,27,1,0,0,0,142,140,1,0,0,0,143,
		144,6,14,-1,0,144,145,3,16,8,0,145,146,6,14,-1,0,146,154,1,0,0,0,147,148,
		10,2,0,0,148,149,5,10,0,0,149,150,3,16,8,0,150,151,6,14,-1,0,151,153,1,
		0,0,0,152,147,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,
		155,29,1,0,0,0,156,154,1,0,0,0,157,158,5,11,0,0,158,159,3,26,13,0,159,
		160,5,12,0,0,160,161,6,15,-1,0,161,191,1,0,0,0,162,163,5,13,0,0,163,164,
		3,30,15,0,164,165,5,4,0,0,165,166,3,30,15,0,166,167,5,14,0,0,167,168,6,
		15,-1,0,168,191,1,0,0,0,169,170,5,13,0,0,170,171,3,26,13,0,171,172,5,14,
		0,0,172,173,6,15,-1,0,173,191,1,0,0,0,174,175,5,16,0,0,175,191,6,15,-1,
		0,176,177,5,5,0,0,177,178,5,11,0,0,178,179,3,28,14,0,179,180,5,12,0,0,
		180,181,5,15,0,0,181,182,3,32,16,0,182,183,6,15,-1,0,183,191,1,0,0,0,184,
		185,5,5,0,0,185,186,5,11,0,0,186,187,3,28,14,0,187,188,5,12,0,0,188,189,
		6,15,-1,0,189,191,1,0,0,0,190,157,1,0,0,0,190,162,1,0,0,0,190,169,1,0,
		0,0,190,174,1,0,0,0,190,176,1,0,0,0,190,184,1,0,0,0,191,31,1,0,0,0,192,
		193,3,30,15,0,193,194,5,3,0,0,194,195,6,16,-1,0,195,200,1,0,0,0,196,197,
		3,30,15,0,197,198,6,16,-1,0,198,200,1,0,0,0,199,192,1,0,0,0,199,196,1,
		0,0,0,200,33,1,0,0,0,10,48,63,79,89,104,120,140,154,190,199
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DTSchema.Parser
